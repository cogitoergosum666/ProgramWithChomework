 a[2][1] 与 *(p+2)[1] 的值为什么不一样？
  1.首先做一个实验，在程序中监控 &a[2][1] 和 &(*(p+2)[1]) 的值，你会发现，两者的监视值不一样。
  2.也就是说 a[2][1] 和 *(p+2)[1]其实是两个不同的变量空间，当然里面存的值多数情况下应该是不一样的。
  3.那么为什么这两个单元不是一个单元呢，看起来似乎应该是同一个单元啊？其实要理解这个问题，需要理解编译器对“[]”这对字符是怎么处理的，这涉及到C语法规范中C编译器对“[]”字符对的处理规定。
  4.假设我们现在不知道C语言规范是怎么规定的，也不知道编译器对“[]”字符对的处理逻辑，那么这个问题能解决么？
  5.我们尝试在监控界面中监控如下变量：*(p+2)，a[2]，&a[2][0]，a[3]，&a[3][0]，&(*(p+2)[0])，&(*(p+2)[1])，&(*(p+2)[2])
        你会发现：*(p+2) = a[2] = &(*(p+2)[0]) = &a[2][0]  --------（1）
                           a[3] = &(*(p+2)[1]) = &a[3][0]  --------（2）
                  &(*(p+2)[2]) = a[3] + (a[3] - a[2])
        所以，你会发现其实*(p+2)[1]对应的应该是数组元素a[3][0]的值，而*(p+2)[2]多对应的空间相当于a[4][0]，这个位置其实已经溢出了数组空间了。
  6.那么为什么是这样的情况呢，在上面的实验中，通过式子（1）类推，可以在式子（2）中得到这样一个等式（可以实验验证一下啊）
                  a[3] = *(p+3) = &(*(p+2)[1]) 也就是： *(p+3) = &(*(p+2)[1])  -------（3）
        a）这里*(p+3)是一个地址值，再看p的定义：“int (*p)[4] = a;”,p的定义里面有一个重点，需要注意的是：p是指向一个长度4的int数组的指针，可以理解为p指向一个int数组的首地址，由于一个int数组的首地址类型是int*，所以p的类型等价于int**，那么p+1，p+2，……，p+n 的值的类型应该都是int**；
        b）由于p+3是一个int**,即p+3这个地址指向的空间里存着一个类型为int*的地址值，所以*(p+3)也是一个地址值，这个地址值得类型是int*，在这里*(p+3)这个地址值指向数组元素a[3][0]对应的内存空间；
        c）最后再来看*(p+2)[1]，结合公式（3），我可以合理猜测，编译器在处理“[i]”时，无非是对一个地址变量偏移i个位置，然后把这个位置里面的值取出来，所以可以看成*(p+2)[i] = *(*(p+2+i))
        d）至于从*(p+2)[0]到*(p+2)[1]之所以偏移了一整行而不是只偏移了一个int值，很大可能是由于p的定义造成的，还记得p的定义么：p是指向一个长度4的int数组的指针。
        e）当然，如果想彻底而准确的弄清楚上述问题的原因，需要去查C语言详细的语法规范和编译规范，但通过实验，可以确认的是上述猜测是合理的，同学们可以根据上述a）-d）的描述进行理解。